****************
* p2 Shuffleness / Knapsack
* cs 421
* 29 July 2016
* Eric Miller
**************** 

OVERVIEW:
Solving the Knapsack and Shuffleness problems using pure recursion or dynamic programming.

BUILDING AND RUNNING:
 To compile, type the following: 
 	javac <ProgramName>.java
 	
 To run Knapsack programs, type the following:
	java Knapsack<Rec/DP> <num of items> <weight capacity> <w.txt (weights file) > <v.txt (values file) >
	    
	Example:    java KnapsackRec 10 50 w.txt v.txt
	w.txt and v.txt should have values listed on their own line in the appropriate order.
	
 To run Shuffleness programs, type the following:
 	java Shuffle<Rec/DP> <word x> <word y> <word z>
 	
 	Example: java ShuffleDP car go cgaro

PROGRAM DESIGN:
We solve each problem using either pure recursion, or dynamic programming.

Dynamic Programming programs print out a decision/optimal value table and use a simple algorithm to read the 
table and return the solution.

Pure Recursion programs simply use recursion to return the solution for the Shuffle problem. For the knapsack
problem, it creates a decision table using pure recursion, from which it determines the optimal set of items to pick.

***TESTING***
To test the shuffleness programs, I simply came up with my own words and tested them.

To test the Knapsack problem, I used test cases that I found online 
(https://people.sc.fsu.edu/~jburkardt/datasets/knapsack_01/knapsack_01.html)

Example Results:

Shuffleness:
Recursive:
input: car go cgaro
yes
Recursive Calls: 12

Dynamic Programming:
    0   1   2   
0  yes no  no  
1  yes yes no  
2  no  yes no  
3  no  yes yes 
Solution: yes
Table References: 15


Knapsack:

Weights:
25
35
45
5
25 
3
2
2
Values: 
350
400
450 
20
70
8
5
5

Recursive:
Optimal Value: 900
Items Taken: 1 3 4 5 7 8 
Recursive Calls: 443

Dynamic Programming:

    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80   81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96   97   98   99  100  101  102  103  104  

0|
1|
2|  0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0  350  350  350  350  350  350  350  350  350  350  400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 400* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 750* 
3|  0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0  350  350  350  350  350  350  350  350  350  350  400  400  400  400  400  400  400  400  400  400  450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 450* 750  750  750  750  750  750  750  750  750  750  800* 800* 800* 800* 800* 800* 800* 800* 800* 800* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 850* 
4|  0    0    0    0    0   20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20*  20* 350  350  350  350  350  370* 370* 370* 370* 370* 400  400  400  400  400  420* 420* 420* 420* 420* 450  450  450  450  450  470* 470* 470* 470* 470* 470* 470* 470* 470* 470* 750  750  750  750  750  770* 770* 770* 770* 770* 800  800  800  800  800  820* 820* 820* 820* 820* 850  850  850  850  850  870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 870* 
5|  0    0    0    0    0   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20   20  350  350  350  350  350  370  370  370  370  370  400  400  400  400  400  420  420  420  420  420  450  450  450  450  450  470  470  470  470  470  470  470  470  470  470  750  750  750  750  750  770  770  770  770  770  800  800  800  800  800  820  820  820  820  820  850  850  850  850  850  870  870  870  870  870  870  870  870  870  870  870  870  870  870  870  890* 890* 890* 890* 890* 
6|  0    0    0    8*   8*  20   20   20   28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28*  28* 350  350  350  358* 358* 370  370  370  378* 378* 400  400  400  408* 408* 420  420  420  428* 428* 450  450  450  458* 458* 470  470  470  478* 478* 478* 478* 478* 478* 478* 750  750  750  758* 758* 770  770  770  778* 778* 800  800  800  808* 808* 820  820  820  828* 828* 850  850  850  858* 858* 870  870  870  878* 878* 878* 878* 878* 878* 878* 878* 878* 878* 878* 878* 890  890  890  898* 898* 
7|  0    0    5*   8    8   20   20   25*  28   28   33*  33*  33*  33*  33*  33*  33*  33*  33*  33*  33*  33*  33*  33*  33* 350  350  355* 358  358  370  370  375* 378  378  400  400  405* 408  408  420  420  425* 428  428  450  450  455* 458  458  470  470  475* 478  478  483* 483* 483* 483* 483* 750  750  755* 758  758  770  770  775* 778  778  800  800  805* 808  808  820  820  825* 828  828  850  850  855* 858  858  870  870  875* 878  878  883* 883* 883* 883* 883* 883* 883* 883* 883* 883* 890  890  895* 898  898  
8|  0    0    5    8   10*  20   20   25   28   30*  33   33   38*  38*  38*  38*  38*  38*  38*  38*  38*  38*  38*  38*  38* 350  350  355  358  360* 370  370  375  378  380* 400  400  405  408  410* 420  420  425  428  430* 450  450  455  458  460* 470  470  475  478  480* 483  483  488* 488* 488* 750  750  755  758  760* 770  770  775  778  780* 800  800  805  808  810* 820  820  825  828  830* 850  850  855  858  860* 870  870  875  878  880* 883  883  888* 888* 888* 888* 888* 888* 888* 888* 890  890  895  898  900* 
Optimal Value: 900
Items Taken: 1 3 4 5 7 8 
Table References: 1530
